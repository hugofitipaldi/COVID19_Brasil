arrowsize = 1,
showarrow = TRUE,
ax = -90,
ay = -90
) %>%
plotly::add_annotations(
x = as.Date("2020-03-24"),
y = 46,
text = paste('<br>Primeiro</br> pronunciamento Bolsonaro:</br> <a href = "https://www1.folha.uol.com.br/poder/2020/03/em-pronunciamento-bolsonaro-critica-fechamento-de-escolas-ataca-governadores-e-culpa-midia.shtml">"gripezinha"</a>'),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = 30,
ay = -90
) %>%
plotly::add_annotations(
x = as.Date("2020-03-10"),
y = 0,
text = paste('<br>Bolsonaro sobre COVID19: </br><a href="https://g1.globo.com/politica/noticia/2020/03/10/bolsonaro-diz-que-questao-do-coronavirus-e-muito-mais-fantasia.ghtml">"pequena crise"</a>'),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1.5,
showarrow = TRUE,
ax = -90,
ay = -70
) %>%
plotly::add_annotations(
x = as.Date("2020-03-13"),
y = 0,
text = paste('<br>Bolsonaro testa positivo</br> para COVID19</br> e depois <a href = "https://politica.estadao.com.br/noticias/geral,bolsonaro-diz-que-2-teste-para-coronavirus-deu-negativo,70003237455">nega</a>'),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1.5,
showarrow = TRUE,
ax = -30,
ay = -150
) %>%
plotly::add_annotations(
x = as.Date("2020-03-20"),
y = 11,
text = paste('<br><a href = "https://noticias.uol.com.br/politica/ultimas-noticias/2020/03/22/coronavirus-comitiva-jair-bolsonaro-eua-donald-trump-marcelo-thome-rondonia.htm">Número de infectados da comitiva que </br> viajou com Bolsonaro</br> sobe para 23 </a>'),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1.5,
showarrow = TRUE,
ax = -10,
ay = -200
) %>%
plotly::add_annotations(
x = as.Date("2020-04-19"),
y = 2462,
text = paste('<br><a href="https://www.dn.pt/mundo/bolsonaro-participa-em-manifestacao-contra-o-isolamento-e-a-favor-de-intervencao-militar-12091094.html">Bolsonaro participa em manifestação </br> contra o isolamento e </br> a favor de intervenção militar</a>'),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1.5,
showarrow = TRUE,
ax = -90,
ay = -90
) %>%
plotly::add_annotations(
x = as.Date("2020-03-31"),
y = 201,
text = paste('<br>Segundo</br> pronunciamento Bolsonaro:</br> <a href = "https://www1.folha.uol.com.br/poder/2020/03/em-novo-pronunciamento-bolsonaro-distorce-oms-e-volta-a-igualar-empregos-e-vidas-diante-do-coronavirus.shtml">críticas ao isolamento</a>'),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = 160,
ay = -30
) %>%
plotly::add_annotations(
x = as.Date("2020-04-08"),
y = 819,
text = paste('<br>Terceiro</br> pronunciamento Bolsonaro:</br> <a href = "https://www.correiobraziliense.com.br/app/noticia/politica/2020/04/08/interna_politica,843286/pronunciamento-de-bolsonaro-nesta-quarta-feira-8-4.shtml">atrito com governadores</a>'),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -90,
ay = -90
) %>%
plotly::add_annotations(
x = as.Date("2020-04-24"),
y = 3704,
text = paste('<a href = https://noticias.uol.com.br/saude/ultimas-noticias/redacao/2020/04/24/em-meio-a-pandemia-bolsonaro-da-entrevista-com-aglomeracao-de-ministros.htm><br>Contariando OMS, Bolsonaro discursa </br> ao lado de mininstros promovendo aglomeração</a>'),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -90,
ay = -45
) %>%
plotly::add_annotations(
x = as.Date("2020-04-23"),
y = 3331,
text = paste('<a href = ""><br>Bolsonaro veta projeto que dispensava </br>trabalhadores de justificar faltas por 7 dias'),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -145,
ay = -45
) %>%
plotly::add_annotations(
x = as.Date("2020-03-12"),
y = 0,
text = paste('<br>Membro da comitiva presidencial nos EUA</br><a href = "https://theintercept.com/2020/03/12/wajngarten-coronavirus-covid-bolsonaro/">testa positivo para COVID19</a>'),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -90,
ay = -120
) %>%
plotly::layout(
title = "Mortes por COVID19 no Brasil e postura de Jair Bolsonaro",
yaxis = list(title = "Número cumulativo de mortes"),
xaxis = list(title = "Data"),
legend = list(x = 0.1, y = 0.9),
hovermode = "compare"
)
library(rsconnect)
rsconnect::setAccountInfo(name='hugofitipaldi',
token='117A4240F6AB34A3839D140D1CF1AD92',
secret='<SECRET>')
rsconnect::setAccountInfo(name='hugofitipaldi',
token='117A4240F6AB34A3839D140D1CF1AD92',
secret='UyYv2KrYYEvgTmCI3wjmIPJXpKGb2/3PlWrzCYlp')
---
title: "Swedish COVID19 Tracker"
output:
flexdashboard::flex_dashboard:
orientation: columns
vertical_layout: fill
---
```{r setup, include=FALSE}
library(flexdashboard)
#------------------ Parameters ------------------
setwd('~/Desktop')
# Scrapping Folkhalsomyndigheten website
library(shiny)
library(shinydashboard)
library(tidyverse)
library(leaflet)
library(plotly)
library(DT)
library(fs)
library(wbstats)
library(swemaps)
library(raster)
library(flexdashboard)
downloadfolkhalsomyndigheten <- function() {
download.file(
url      = "https://www.arcgis.com/sharing/rest/content/items/b5e7488e117749c19881cce45db13f7e/data",
destfile = "swedish_data/Folkhalsomyndigheten_Covid19.xlsx"
)
}
updateData <- function() {
# Download data from Folkhalsomyndigheten if the data is older than 0.5h
if (!dir_exists("swedish_data")) {
dir.create('swedish_data')
downloadfolkhalsomyndigheten()
} else if ((!file.exists("swedish_data/Folkhalsomyndigheten_Covid19.xlsx")) || (as.double(Sys.time() - file_info("swedish_data/Folkhalsomyndigheten_Covid19.xlsx")$change_time, units = "hours") > 0.5)) {
downloadfolkhalsomyndigheten()
}
}
# Update with start of app
updateData()
# SOME cleaning for later use ------------------------------------------------------------------------------
# Reading Folkhalsomyndigheten excell file
timeseries_region <- rio::import('swedish_data/Folkhalsomyndigheten_Covid19.xlsx', which = 1)
total_region <- rio::import('swedish_data/Folkhalsomyndigheten_Covid19.xlsx', which = 4)
gender_df <- rio::import('swedish_data/Folkhalsomyndigheten_Covid19.xlsx', which = 5)
agegroup_df <- rio::import('swedish_data/Folkhalsomyndigheten_Covid19.xlsx', which = 6)
# Get lastest data
current_date <- as.Date(tail(timeseries_region$Statistikdatum, 1), format = "%Y-%m-%d")
changed_date <- file_info("swedish_data/Folkhalsomyndigheten_Covid19.xlsx")$change_time
# Get evolution data by region
timeseries_region_sub <- timeseries_region[,-2] %>%
pivot_longer(names_to = "Region", cols = 2:22) %>%
group_by(Statistikdatum, Region) %>%
summarise("confirmed" = sum(value, na.rm = T))
SWE_centroids <- swemaps::cent_ln
SWE_centroids$lnnamn <- gsub(' län', '', SWE_centroids$lnnamn)
SWE_centroids$lnnamn <- sub("s$", "", SWE_centroids$lnnamn)
SWE_centroids$lnnamn[SWE_centroids$lnnamn == "Jämtland"] <- "Jämtland_Härjedalen"
SWE_centroids$lnnamn[SWE_centroids$lnnamn == "Södermanland"] <- "Sörmland"
SWE_centroids$lnnamn[SWE_centroids$lnnamn == "Västra Götaland"] <- "Västra_Götaland"
#test_a <- names(timeseries_region)
#test_b <- SWE_centroids$lnnamn
#test_a[!(test_a %in% test_b)]
SWE_centroids <- SWE_centroids[,c(5,4,6)]
names(SWE_centroids) <- c('Lat', 'Long', 'Region')
timeseries_region_sub <- timeseries_region_sub %>%
left_join(SWE_centroids, by = 'Region')
# ---- Download population data ---- Statistics Sweden
# Data from SCB (Statistics Sweden)
# For later use in the app
Region <- names(timeseries_region)[-c(1,2)]
Population <- c(159606, 287966, 59686, 287382, 333848, 130810, 363599, 245446, 201469, 250093, 1377827, 2377081,
297540, 383713, 282414, 271736, 245347, 275845, 1725881, 304805, 465495)
Pop_Swe <- data.frame(Region, Population)
data_evolution_swe <- timeseries_region_sub %>%
left_join(Pop_Swe, by = 'Region')
# For the maps you can remove all the objects except from
rm(list=setdiff(ls(), c("timeseries_region_sub", "data_evolution_swe")))
# Maps         ------------------------------------------------------------------------------
# Adding popup information
SWE_data  <- data_evolution_swe %>%
group_by(Region, Lat, Long) %>%
summarise("value" = sum(confirmed, na.rm = T))
SWE_data <- SWE_data %>%
mutate(popup_info = paste("<b>Region</b>", "<br/>",  Region, "<br/>",
"<b># CONTRIBUTORS</b>","<br/>", sample(100:1000, 1),
"<br/>", "<b>% OF PEOPLE WITH SYMPTOMATIC COVID (ESTIMATED)</b>",
"<br/>", round(runif(1, 1.0, 9.0), 2), "%"))
# Swedish map for app (per Region)
swe <- getData("GADM", country = "SWE", level = 1)
swe_changed <- swe
swe_changed$value <- SWE_data$value
swe_changed$popup_info <- SWE_data$popup_info
swe_changed$Lat <- SWE_data$Lat
swe_changed$Long <- SWE_data$Long
# For Neli
setwd("~/Downloads/Re__Sorry_last_one_got_squished")
library(patchwork)
library(tidyverse)
library(RColorBrewer)
sverige <- rio::import("sverige.csv")
sverige <- sverige[-22, ]
sverige$County <- str_replace(sverige$County, " County", "")
sex <- rio::import("sex.csv")
age <- rio::import("age.csv")
#------------------ John Hopkins Data ------------------
downloadJH <- function() {
download.file(
url      = "https://github.com/RamiKrispin/coronavirus-csv/raw/master/coronavirus_dataset.csv",
destfile = "swedish_data/coronavirus_dataset.csv"
)
}
updateJH <- function() {
# Download data from Folkhalsomyndigheten if the data is older than 0.5h
if (!dir_exists("swedish_data")) {
dir.create('swedish_data')
downloadJH()
} else if ((!file.exists("swedish_data/coronavirus_dataset.csv")) || (as.double(Sys.time() - file_info("swedish_data/coronavirus_dataset.csv")$change_time, units = "hours") > 0.5)) {
downloadJH()
}
}
# Update with start of app
updateJH()
coronavirus <- rio::import('swedish_data/coronavirus_dataset.csv', which = 1)
#------------------ Parameters ------------------
# Set colors
# https://www.w3.org/TR/css-color-3/#svg-color
confirmed_color <- "purple"
active_color <- "#1f77b4"
recovered_color <- "forestgreen"
death_color <- "red"
#------------------ Data ------------------
df <- coronavirus %>%
# dplyr::filter(date == max(date)) %>%
dplyr::filter(Country.Region == "Sweden") %>%
dplyr::group_by(Country.Region, type) %>%
dplyr::summarise(total = sum(cases)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
# dplyr::mutate(unrecovered = confirmed - ifelse(is.na(recovered), 0, recovered) - ifelse(is.na(death), 0, death)) %>%
dplyr::mutate(unrecovered = confirmed - ifelse(is.na(death), 0, death)) %>%
dplyr::arrange(-confirmed) %>%
dplyr::ungroup() %>%
dplyr::mutate(country = dplyr::if_else(Country.Region == "United Arab Emirates", "UAE", Country.Region)) %>%
dplyr::mutate(country = dplyr::if_else(country == "Mainland China", "China", country)) %>%
dplyr::mutate(country = dplyr::if_else(country == "North Macedonia", "N.Macedonia", country)) %>%
dplyr::mutate(country = trimws(country)) %>%
dplyr::mutate(country = factor(country, levels = country))
df_daily <- coronavirus %>%
dplyr::filter(Country.Region == "Sweden") %>%
dplyr::group_by(date, type) %>%
dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
dplyr::arrange(date) %>%
dplyr::ungroup() %>%
#dplyr::mutate(active = confirmed - death - recovered) %>%
dplyr::mutate(active = confirmed - death) %>%
dplyr::mutate(
confirmed_cum = cumsum(confirmed),
death_cum = cumsum(death),
# recovered_cum = cumsum(recovered),
active_cum = cumsum(active)
)
df_daily$date <- as.Date(df_daily$date, format = "%Y-%m-%d")
df1 <- coronavirus %>% dplyr::filter(date == max(date))
```
Overview
=====================================
Column {data-width=650}
-----------------------------------------------------------------------
### Swedish COVID19 Symptom Tracker Map
```{r}
pal <- colorQuantile(
palette = "Blues",
domain = swe_changed$value, n = 5
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = swe_changed,
color = 'black',
fillColor =  ~pal(value),
popup = swe_changed$popup_info,
smoothFactor = 0.2, fillOpacity = 1,  weight = 1
) %>%
addLegend("topleft", pal = pal, values = swe_changed$value,
title = paste("People with symptomatic COVID (%)", "<br/>",
"ESTIMATED PERCENTAGE (%)"),
opacity = 1)
```
Column {data-width=350}
-----------------------------------------------------------------------
### Sex Distribution COVID19 Cases
```{r}
b <- sex %>% ggplot(aes(x="", y = n, fill=Sex)) +
geom_bar(stat = "identity", width=1) +
coord_polar(theta = "y", start = 0) +
theme_void() + scale_fill_brewer(palette = "OrRd")
b
```
### Age Groups COVID19 Cases
```{r}
c <- age %>% ggplot(aes(x= Age, y=n, label = n, fill = n)) +
geom_col() + # Bar plot
coord_flip() + # Flip the coordinates
labs(title = "People with symptomatic COVID",
x = "Age Group",
y = "Number") +
scale_y_continuous(expand = c(0, 0, 0, 500)) +  # Move the bars to the left
theme_minimal() +
geom_text(size = 3, nudge_y = 300) +
scale_fill_gradientn(colours=brewer.pal(3,"OrRd"))
c
```
### Distribution of COVID19 Cases in Sweden
```{r}
a <- sverige %>% ggplot(aes(x=reorder(County, n), y=n, label = n, fill = n)) +
geom_col() + # Bar plot
coord_flip() + # Flip the coordinates
labs(title = "People with symptomatic COVID",
x = "County",
y = "Number") +
scale_y_continuous(expand = c(0, 0, 0, 500)) +  # Move the bars to the left
theme_minimal() +
geom_text(size = 3, nudge_y = 300) +
scale_fill_gradientn(colours=brewer.pal(3,"OrRd"))
a <- ggplotly(a)
a
```
Trends
=====================================
### Swedish COVID19 Symptom Tracker Map
```{r}
pal <- colorQuantile(
palette = "Blues",
domain = swe_changed$value, n = 5
)
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
data = swe_changed,
color = 'black',
fillColor =  ~pal(value),
popup = swe_changed$popup_info,
smoothFactor = 0.2, fillOpacity = 1,  weight = 1
) %>%
addLegend("topleft", pal = pal, values = swe_changed$value,
title = paste("People with symptomatic COVID (%)", "<br/>",
"ESTIMATED PERCENTAGE (%)"),
opacity = 1)
```
Column {data-width=350}
-----------------------------------------------------------------------
### COVID19 trend per Region
```{r}
data <- data_evolution_swe %>%
group_by(Statistikdatum, Region) %>%
mutate(confirmed_cum = cumsum(confirmed)) %>%
summarise(
"value" = sum(confirmed, na.rm = T),
) %>%
as.data.frame()
p <- plot_ly(
data,
x     = ~Statistikdatum,
y     = ~value,
color = ~Region,
type  = 'scatter',
mode  = 'lines') %>%
layout(
yaxis = list(title = "# Cases"),
xaxis = list(title = "Date")
)
p
```
### COVID19 in Sweden
```{r}
plotly::plot_ly(data = df_daily) %>%
plotly::add_trace(
x = ~date,
# y = ~active_cum,
y = ~confirmed_cum,
type = "scatter",
mode = "lines+markers",
# name = "Active",
name = "Confirmed",
line = list(color = active_color),
marker = list(color = active_color)
) %>%
plotly::add_trace(
x = ~date,
y = ~death_cum,
type = "scatter",
mode = "lines+markers",
name = "Death",
line = list(color = death_color),
marker = list(color = death_color)
) %>%
plotly::add_annotations(
x = as.Date("2020-01-31"),
y = 1,
text = paste("First case"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -10,
ay = -90
) %>%
plotly::add_annotations(
x = as.Date("2020-03-11"),
y = 3,
text = paste("First death"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -90,
ay = -90
)  %>%
#   plotly::add_annotations(
#     x = as.Date("2020-03-18"),
#     y = 14,
#     text = paste(
#       "New containment",
#       "",
#       "measures"
#     ),
#     xref = "x",
#     yref = "y",
#     arrowhead = 5,
#     arrowhead = 3,
#     arrowsize = 1,
#     showarrow = TRUE,
#     ax = -10,
#     ay = -90
plotly::layout(
title = "",
yaxis = list(title = "Cumulative number of cases"),
xaxis = list(title = "Date"),
legend = list(x = 0.1, y = 0.9),
hovermode = "compare"
)
```
rsconnect::deployApp
setwd("~/Desktop/COVID19 Tracker")
rsconnect::setAccountInfo(name='hugofitipaldi',
token='117A4240F6AB34A3839D140D1CF1AD92',
secret='UyYv2KrYYEvgTmCI3wjmIPJXpKGb2/3PlWrzCYlp')
rsconnect::deployApp(setwd("~/Desktop/COVID19 Tracker/DASHNELLI.Rmd")
)
list.files()
rsconnect::deployApp(setwd("~/Desktop/COVID19 Tracker/DASHNELI.Rmd"))
rsconnect::deployApp(setwd("~/Desktop/COVID19 Tracker/DASHNELI.Rmd"))
