#     showarrow = TRUE,
#     ax = -10,
#     ay = -90
plotly::layout(
title = "",
yaxis = list(title = "Numero cumulativo de casos"),
xaxis = list(title = "Data"),
legend = list(x = 0.1, y = 0.9),
hovermode = "compare"
)
covid19_gov
names(covid19_gov) <- c("Regiao", "Sigla", "Data", "Casos_novos",
"Casos_acumulados", "Obitios_novos", "Obitos_acumulados")
plotly::plot_ly(data = covid19_gov) %>%
plotly::add_trace(
x = ~Data,
# y = ~active_cum,
y = ~Casos_acumulados,
type = "scatter",
mode = "lines+markers",
# name = "Active",
name = "Confirmado",
line = list(color = active_color),
marker = list(color = active_color)
) %>%
plotly::add_trace(
x = ~Data,
y = ~Obitios_acumulados,
type = "scatter",
mode = "lines+markers",
name = "Mortes",
line = list(color = death_color),
marker = list(color = death_color)
) %>%
plotly::add_annotations(
x = as.Date("2020-01-31"),
y = 1,
text = paste("Primeiro caso"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -10,
ay = -90
) %>%
plotly::add_annotations(
x = as.Date("2020-03-11"),
y = 3,
text = paste("Primeira morte"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -90,
ay = -90
)  %>%
#   plotly::add_annotations(
#     x = as.Date("2020-03-18"),
#     y = 14,
#     text = paste(
#       "New containment",
#       "",
#       "measures"
#     ),
#     xref = "x",
#     yref = "y",
#     arrowhead = 5,
#     arrowhead = 3,
#     arrowsize = 1,
#     showarrow = TRUE,
#     ax = -10,
#     ay = -90
plotly::layout(
title = "",
yaxis = list(title = "Numero cumulativo de casos"),
xaxis = list(title = "Data"),
legend = list(x = 0.1, y = 0.9),
hovermode = "compare"
)
plotly::plot_ly(data = covid19_gov) %>%
plotly::add_trace(
x = ~Data,
# y = ~active_cum,
y = ~Casos_acumulados,
type = "scatter",
mode = "lines+markers",
# name = "Active",
name = "Confirmado",
line = list(color = active_color),
marker = list(color = active_color)
) %>%
plotly::add_trace(
x = ~Data,
y = ~Obitos_acumulados,
type = "scatter",
mode = "lines+markers",
name = "Mortes",
line = list(color = death_color),
marker = list(color = death_color)
) %>%
plotly::add_annotations(
x = as.Date("2020-01-31"),
y = 1,
text = paste("Primeiro caso"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -10,
ay = -90
) %>%
plotly::add_annotations(
x = as.Date("2020-03-11"),
y = 3,
text = paste("Primeira morte"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -90,
ay = -90
)  %>%
#   plotly::add_annotations(
#     x = as.Date("2020-03-18"),
#     y = 14,
#     text = paste(
#       "New containment",
#       "",
#       "measures"
#     ),
#     xref = "x",
#     yref = "y",
#     arrowhead = 5,
#     arrowhead = 3,
#     arrowsize = 1,
#     showarrow = TRUE,
#     ax = -10,
#     ay = -90
plotly::layout(
title = "",
yaxis = list(title = "Numero cumulativo de casos"),
xaxis = list(title = "Data"),
legend = list(x = 0.1, y = 0.9),
hovermode = "compare"
)
View(covid19_gov)
plotly::plot_ly(data = ungroup(covid19_gov)) %>%
plotly::add_trace(
x = ~Data,
# y = ~active_cum,
y = ~Casos_acumulados,
type = "scatter",
mode = "lines+markers",
# name = "Active",
name = "Confirmado",
line = list(color = active_color),
marker = list(color = active_color)
) %>%
plotly::add_trace(
x = ~Data,
y = ~Obitos_acumulados,
type = "scatter",
mode = "lines+markers",
name = "Mortes",
line = list(color = death_color),
marker = list(color = death_color)
) %>%
plotly::add_annotations(
x = as.Date("2020-01-31"),
y = 1,
text = paste("Primeiro caso"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -10,
ay = -90
) %>%
plotly::add_annotations(
x = as.Date("2020-03-11"),
y = 3,
text = paste("Primeira morte"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -90,
ay = -90
)  %>%
#   plotly::add_annotations(
#     x = as.Date("2020-03-18"),
#     y = 14,
#     text = paste(
#       "New containment",
#       "",
#       "measures"
#     ),
#     xref = "x",
#     yref = "y",
#     arrowhead = 5,
#     arrowhead = 3,
#     arrowsize = 1,
#     showarrow = TRUE,
#     ax = -10,
#     ay = -90
plotly::layout(
title = "",
yaxis = list(title = "Numero cumulativo de casos"),
xaxis = list(title = "Data"),
legend = list(x = 0.1, y = 0.9),
hovermode = "compare"
)
df_daily <- coronavirus %>%
dplyr::filter(Country.Region == "Brazil") %>%
dplyr::group_by(date, type) %>%
dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
dplyr::arrange(date) %>%
dplyr::ungroup() %>%
#dplyr::mutate(active = confirmed - death - recovered) %>%
dplyr::mutate(active = confirmed - death) %>%
dplyr::mutate(
confirmed_cum = cumsum(confirmed),
death_cum = cumsum(death),
# recovered_cum = cumsum(recovered),
active_cum = cumsum(active)
)
plotly::plot_ly(data = df_daily) %>%
plotly::add_trace(
x = ~date,
# y = ~active_cum,
y = ~confirmed_cum,
type = "scatter",
mode = "lines+markers",
# name = "Active",
name = "Confirmed",
line = list(color = active_color),
marker = list(color = active_color)
) %>%
plotly::add_trace(
x = ~date,
y = ~death_cum,
type = "scatter",
mode = "lines+markers",
name = "Death",
line = list(color = death_color),
marker = list(color = death_color)
) %>%
plotly::add_annotations(
x = as.Date("2020-01-31"),
y = 1,
text = paste("First case"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -10,
ay = -90
) %>%
plotly::add_annotations(
x = as.Date("2020-03-11"),
y = 3,
text = paste("First death"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -90,
ay = -90
)  %>%
#   plotly::add_annotations(
#     x = as.Date("2020-03-18"),
#     y = 14,
#     text = paste(
#       "New containment",
#       "",
#       "measures"
#     ),
#     xref = "x",
#     yref = "y",
#     arrowhead = 5,
#     arrowhead = 3,
#     arrowsize = 1,
#     showarrow = TRUE,
#     ax = -10,
#     ay = -90
plotly::layout(
title = "",
yaxis = list(title = "Cumulative number of cases"),
xaxis = list(title = "Date"),
legend = list(x = 0.1, y = 0.9),
hovermode = "compare"
)
plotly::plot_ly(data = df_daily) %>%
plotly::add_trace(
x = ~date,
# y = ~active_cum,
y = ~confirmed_cum,
type = "scatter",
mode = "lines+markers",
# name = "Active",
name = "Confirmed",
line = list(color = active_color),
marker = list(color = active_color)
) %>%
plotly::add_trace(
x = ~date,
y = ~death_cum,
type = "scatter",
mode = "lines+markers",
name = "Death",
line = list(color = death_color),
marker = list(color = death_color)
) %>%
plotly::add_annotations(
x = as.Date("2020-01-31"),
y = 1,
text = paste("First case"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -10,
ay = -90
) %>%
plotly::add_annotations(
x = as.Date("2020-03-11"),
y = 3,
text = paste("First death"),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -90,
ay = -90
)  %>%
plotly::add_annotations(
x = as.Date("2020-03-18"),
y = 14,
text = paste(
"New containment",
"",
"measures"
),
xref = "x",
yref = "y",
arrowhead = 5,
arrowhead = 3,
arrowsize = 1,
showarrow = TRUE,
ax = -10,
ay = -90) %>%
plotly::layout(
title = "",
yaxis = list(title = "Cumulative number of cases"),
xaxis = list(title = "Date"),
legend = list(x = 0.1, y = 0.9),
hovermode = "compare"
)
View(coronavirus)
coronavirus::update_datasets()
coronavirus::update_datasets()
updateData()
setwd("~/Desktop/COVID19 Tracker")
setwd("~/Desktop/COVID19 Tracker")
library("shiny")
library("shinydashboard")
library("tidyverse")
library("leaflet")
library("plotly")
library("DT")
library("fs")
library("wbstats")
library(swemaps)
downloadfolkhalsomyndigheten <- function() {
download.file(
url      = "https://www.arcgis.com/sharing/rest/content/items/b5e7488e117749c19881cce45db13f7e/data",
destfile = "swedish_data/Folkhalsomyndigheten_Covid19.xlsx"
)
}
updateData <- function() {
# Download data from Folkhalsomyndigheten if the data is older than 0.5h
if (!dir_exists("swedish_data")) {
dir.create('swedish_data')
downloadfolkhalsomyndigheten()
} else if ((!file.exists("swedish_data/Folkhalsomyndigheten_Covid19.xlsx")) || (as.double(Sys.time() - file_info("swedish_data/Folkhalsomyndigheten_Covid19.xlsx")$change_time, units = "hours") > 0.5)) {
downloadfolkhalsomyndigheten()
}
}
# Update with start of app
updateData()
# Reading Folkhalsomyndigheten excell file
timeseries_region <- rio::import('swedish_data/Folkhalsomyndigheten_Covid19.xlsx', which = 1)
total_region <- rio::import('swedish_data/Folkhalsomyndigheten_Covid19.xlsx', which = 4)
gender_df <- rio::import('swedish_data/Folkhalsomyndigheten_Covid19.xlsx', which = 5)
agegroup_df <- rio::import('swedish_data/Folkhalsomyndigheten_Covid19.xlsx', which = 6)
View(timeseries_region)
setwd("~/Documents/Projects/COVID19_Brasil/R")
downloadGithubData <- function() {
download.file(
url      = "https://github.com/CSSEGISandData/COVID-19/archive/master.zip",
destfile = "data/covid19_data.zip"
)
data_path <- "COVID-19-master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_"
unzip(
zipfile   = "data/covid19_data.zip",
files     = paste0(data_path, c("confirmed_global.csv", "deaths_global.csv", "recovered_global.csv")),
exdir     = "data",
junkpaths = T
)
}
updateData <- function() {
# Download data from Johns Hopkins (https://github.com/CSSEGISandData/COVID-19) if the data is older than 0.5h
if (!dir_exists("data")) {
dir.create('data')
downloadGithubData()
} else if ((!file.exists("data/covid19_data.zip")) || (as.double(Sys.time() - file_info("data/covid19_data.zip")$change_time, units = "hours") > 0.5)) {
downloadGithubData()
}
}
# Update with start of app
updateData()
coronavirus::update_datasets()
devtools::install_github("covid19r/coronavirus")
remotes::install_github("covid19r/coronavirus")
# Some plots
# Cases per day
library(coronavirus)
data("coronavirus")
devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(flexdashboard)
# install.packages("devtools")
# devtools::install_github("RamiKrispin/coronavirus", force = TRUE)
library(coronavirus)
data(coronavirus)
#------------------ Parameters ------------------
# Set colors
# https://www.w3.org/TR/css-color-3/#svg-color
confirmed_color <- "purple"
active_color <- "#1f77b4"
recovered_color <- "forestgreen"
death_color <- "red"
#------------------ Data ------------------
df <- coronavirus %>%
# dplyr::filter(date == max(date)) %>%
dplyr::filter(Country.Region == "Sweden") %>%
dplyr::group_by(Country.Region, type) %>%
dplyr::summarise(total = sum(cases)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
# dplyr::mutate(unrecovered = confirmed - ifelse(is.na(recovered), 0, recovered) - ifelse(is.na(death), 0, death)) %>%
dplyr::mutate(unrecovered = confirmed - ifelse(is.na(death), 0, death)) %>%
dplyr::arrange(-confirmed) %>%
dplyr::ungroup() %>%
dplyr::mutate(country = dplyr::if_else(Country.Region == "United Arab Emirates", "UAE", Country.Region)) %>%
dplyr::mutate(country = dplyr::if_else(country == "Mainland China", "China", country)) %>%
dplyr::mutate(country = dplyr::if_else(country == "North Macedonia", "N.Macedonia", country)) %>%
dplyr::mutate(country = trimws(country)) %>%
dplyr::mutate(country = factor(country, levels = country))
df_daily <- coronavirus %>%
dplyr::filter(Country.Region == "Sweden") %>%
dplyr::group_by(date, type) %>%
dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
dplyr::arrange(date) %>%
dplyr::ungroup() %>%
#dplyr::mutate(active = confirmed - death - recovered) %>%
dplyr::mutate(active = confirmed - death) %>%
dplyr::mutate(
confirmed_cum = cumsum(confirmed),
death_cum = cumsum(death),
# recovered_cum = cumsum(recovered),
active_cum = cumsum(active)
)
df1 <- coronavirus %>% dplyr::filter(date == max(date))
View(df1)
coronavirus::update_datasets()
library(coronavirus)
coronavirus::update_datasets()
coronavirus::update_datasets()
install.packages(c("backports", "car", "class", "classInt", "DescTools", "devtools", "factoextra", "foreach", "foreign", "fs", "fst", "gdtools", "geojsonio", "ggimage", "ggplotify", "ggraph", "ggrepel", "glue", "golem", "graphlayouts", "gtools", "Hmisc", "hrbrthemes", "httpcode", "igraph", "insight", "isoband", "ISOcodes", "janitor", "lattice", "leafem", "lme4", "lubridate", "lwgeom", "mapdeck", "mapview", "matrixStats", "mclust", "modeltools", "multcomp", "nlme", "nloptr", "plotly", "plyr", "qtl", "quantreg", "Rcpp", "reshape2", "rJava", "robustbase", "sf", "SnowballC", "spData", "stars", "survival", "textdata", "tidytext", "tigris", "tinytex", "tmap", "usethis", "vtable", "xfun", "XLConnect", "xml2", "yesno"))
install.packages(c("backports", "car", "class", "classInt", "DescTools", "devtools", "factoextra", "foreach", "foreign", "fs", "fst", "gdtools", "geojsonio", "ggimage", "ggplotify", "ggraph", "ggrepel", "glue", "golem", "graphlayouts", "gtools", "Hmisc", "hrbrthemes", "httpcode", "igraph", "insight", "isoband", "ISOcodes", "janitor", "lattice", "leafem", "lme4", "lubridate", "lwgeom", "mapdeck", "mapview", "matrixStats", "mclust", "modeltools", "multcomp", "nlme", "nloptr", "plotly", "plyr", "qtl", "quantreg", "Rcpp", "reshape2", "rJava", "robustbase", "sf", "SnowballC", "spData", "stars", "survival", "textdata", "tidytext", "tigris", "tinytex", "tmap", "usethis", "vtable", "xfun", "XLConnect", "xml2", "yesno"))
install.packages(c("backports", "car", "class", "classInt", "DescTools", "devtools", "factoextra", "foreach", "foreign", "fs", "fst", "gdtools", "geojsonio", "ggimage", "ggplotify", "ggraph", "ggrepel", "glue", "golem", "graphlayouts", "gtools", "Hmisc", "hrbrthemes", "httpcode", "igraph", "insight", "isoband", "ISOcodes", "janitor", "lattice", "leafem", "lme4", "lubridate", "lwgeom", "mapdeck", "mapview", "matrixStats", "mclust", "modeltools", "multcomp", "nlme", "nloptr", "plotly", "plyr", "qtl", "quantreg", "Rcpp", "reshape2", "rJava", "robustbase", "sf", "SnowballC", "spData", "stars", "survival", "textdata", "tidytext", "tigris", "tinytex", "tmap", "usethis", "vtable", "xfun", "XLConnect", "xml2", "yesno"))
install.packages(c("backports", "car", "class", "classInt", "DescTools", "devtools", "factoextra", "foreach", "foreign", "fs", "fst", "gdtools", "geojsonio", "ggimage", "ggplotify", "ggraph", "ggrepel", "glue", "golem", "graphlayouts", "gtools", "Hmisc", "hrbrthemes", "httpcode", "igraph", "insight", "isoband", "ISOcodes", "janitor", "lattice", "leafem", "lme4", "lubridate", "lwgeom", "mapdeck", "mapview", "matrixStats", "mclust", "modeltools", "multcomp", "nlme", "nloptr", "plotly", "plyr", "qtl", "quantreg", "Rcpp", "reshape2", "rJava", "robustbase", "sf", "SnowballC", "spData", "stars", "survival", "textdata", "tidytext", "tigris", "tinytex", "tmap", "usethis", "vtable", "xfun", "XLConnect", "xml2", "yesno"))
